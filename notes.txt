# Counter-clockwise angle from vector2 to vector1, as seen from normal.
def angleBetween(vector1, vector2, normal = Z_AXIS)
  Math.atan2((vector2 * vector1) % normal, vector1 % vector2)
end

def

def edge_angle(edge)
  angle = angle_in_plane(edge.faces[0].normal, edge.faces[1].normal, edge.line[1])

  # Assuming mesh is oriented, i.e. edge is reversed in exactly one out of the two
  # faces. If not, the return value depends the order the faces are presented in.
  edge.reversed_in?(edge.faces[0]) ? angle : -angle
end

def FindColinear(firstEdge)
	
	firstEdge.end.edges.each{|secondEdge|  
		if(secondEdge!=firstEdge)
			aDotB=firstEdge.line[1]%edge.line[1]
			if(aDotB>0.99999999)
				puts("Coline")
			else
				planeDir=(secondEdge.line[1]*firstEdge.line[1]).normalize
				
				if(alreadyDone.contains(planeDir))
					continue;
				else
					alreadyDone.add(planeDir)
				
				curNode=secondEdge.end
				nextEdge=bestEdgeFromNode(planeDir,curNode) #fits plane and min angle
				while(nextEdge)#while there is a edge that fits the plane
					if nextEdge = firstEdge
						#found loop
						#exit while
`````			end
					if(loopEdges.contains(nextEdge))
						#already visited so dead end
					end
					loopEdges.push(nextEdge)
					nextEdge=bestEdgeFromNode(planeDir,nextEdge.end)
				end
				#if here no found loop
					
				puts("->"+nextNode)  
			end
		end
	}
end

FindConnected

# Float#radians method converts from radians to degrees.
# Use radians internally as it is what the math functions uses,
# but convert at display layer.
edge_angle(Sketchup.active_model.selection.first).radians

firstedge

curEdge

# Counter-clockwise angle from vector2 to vector1, as seen from normal.
def angleBetween(vector1, vector2, normal = Z_AXIS)
  Math.atan2((vector2 * vector1) % normal, vector1 % vector2)
end

def findBest(plane,firstEdge,startNode)
	minAngle=999;
	bestEdge=nil;
	prevNode=firstEdge.other_vertex(startNode)
	firstVect=prevNode.position-startNode.position

	startNode.edges.each{|e|
		if(e==firstEdge)
			next
		end
		other=e.other_vertex(startNode)
		eVect=other.position-startNode.position

		if(firstEdge.end==e.start)
			puts("GoodDir")
			eVect=other.position-startNode.position
		end 
		if(firstEdge.end==e.end)
			puts("FlippedDir")
			eVect=startNode.position-other.position
		end 


		
		dist = other.position.distance_to_plane(plane);
		#puts dist
		#normal=(firstVect*eVect).normalize
		#puts("normal:"+normal.to_s)
		if(dist>0.1)
			puts("Wrong plane:"+dist.to_s)
			#puts("Wrong plane:"+planeDir.to_s)
			next
		end
		angle=angleBetween(firstVect,eVect,plane[1])
		if(angle<minAngle)
			minAngle=angle
			bestEdge=e;
		end
	}
	if(bestEdge!=nil)	
		Sketchup.active_model.selection.add(bestEdge)
	end
	puts (["Best",bestEdge,minAngle.radians])
	return(bestEdge)
end
def selLoop(firstEdge)
	Sketchup.active_model.selection.clear()
	firstPlane=[Geom::Point3d.new(0,0,0),Geom::Vector3d.new(0,0,-1)]
	loopEdges=[]
	curNode=firstEdge.end
	best=findBest(firstPlane,firstEdge,curNode)
	while(best!=nil)
		if(best==firstEdge)
			puts "Good Loop Detected"
			break
		end
		if(loopEdges.include?(best))
			puts("Inner Loop Detected")
			break
		end
		loopEdges.push(best);
		#figure out endNode
		curNode=best.other_vertex(curNode)
		best=findBest(firstPlane,best,curNode)
		#//curNode=nextNode;
	end
	if(best==nil)
		puts("Dead Ended")
	end
end

ChooseBest(plane, firstEdge, edges)
{
	best=nul
	curMinAngle=180
	foreach edge in edges
		if edge.coplaner
			let angle=angleBetween(plane,firstEdge, edge)
			if calc angle < curMinAngle
				best=edge
				curMinAngle=angle
	return best
}


//find all coedges
findLoops(firstEdge)
{

foundLoopsLoops=[]
foundLoopsPlaneDir=[]
done=false;
while(!done)
	foreach edge in end.edges
		if !coliniear(firstEdge,edge) 
			planeDir=cross(firstEdge,edge).normalize 
			if !foundLoops.contains(planeDir) // already done
				//find single(?) loop in plane if any
				foundLoops.push(planeDir)
				curLoop=[edge]//start with current edge
				curNode=edge.end;
				nextEdge=pickBestEdge(planeDir,curNode)
				while(nextEdge){
					if(nextEdge==firstEdge){
						foundLoopsLoops(curLoop)
						break;//out of while
					}
					curLoop.push(edge)
					nextEdge=pickBestEdge(planeDir,edge.end)
				}
}

foreach codege
	get nonCodeges connected to edge
		potentalLoopStarts.push nonCodege
		
sort potentalLoops by plane

while coline 
	

foreach edge
	if nextEdge ! colinear
		get plane 
	

	get normal from edge1 and edge2
	